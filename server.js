console.log("üöÄ Le fichier server.js d√©marre...");

const express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const morgan = require("morgan");
const http = require("http");
const { Server } = require("socket.io");
const connectDB = require("./config/db");
const path = require("path");

dotenv.config();

if (!process.env.JWT_SECRET || !process.env.MONGO_URI) {
  console.error("‚ùå Variables d'environnement manquantes (JWT_SECRET ou MONGO_URI)");
  process.exit(1);
}

console.log("üîë Cl√© JWT utilis√©e : OK (cach√©e)");
console.log("üåç MONGO_URI utilis√©e : OK (cach√©e)");

connectDB()
  .then(() => {
    console.log("‚úÖ Connexion MongoDB r√©ussie !");

    const app = express();
    const server = http.createServer(app);
    const io = new Server(server, {
      cors: {
        origin: ["http://localhost:8081", "http://172.20.10.2:8081"],
        methods: ["GET", "POST", "PUT", "PATCH", "DELETE"],
        credentials: true,
      },
    });

    // ‚úÖ Socket.IO
    io.on("connection", (socket) => {
      console.log("üü¢ Nouveau client connect√© :", socket.id);

      socket.on("joinRoom", (roomId) => {
        socket.join(roomId);
        console.log(`üë• Socket ${socket.id} rejoint la salle ${roomId}`);
      });

      socket.on("sendMessage", (data) => {
        io.to(data.conversationId).emit("newMessage", data);
      });

      socket.on("disconnect", () => {
        console.log("üî¥ D√©connexion :", socket.id);
      });
    });

    // ‚úÖ Middlewares
    app.use(cors({
      origin: ["http://localhost:8081", "http://172.20.10.2:8081"],
      methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization"],
      credentials: true
    }));
    app.use(express.json());
    app.use(morgan("dev"));

    // ‚úÖ Fichiers statiques (si uploads)
    app.use("/uploads", express.static(path.join(__dirname, "uploads")));

    console.log("‚úÖ Middlewares activ√©s avec gestion CORS, JSON et logs HTTP !");

    // ‚úÖ Routes
    const authRoutes = require("./routes/authRoutes"); // ‚ö†Ô∏è Doit inclure PATCH /users/:id
    const clientsRoutes = require("./routes/clientsRoutes");
    const coursesRoutes = require("./routes/coursesRoutes");
    const planningRoutes = require("./routes/planningRoutes");
    const chatRoutes = require("./routes/chatRoutes");
    const employeeRoutes = require("./routes/employeeRoutes");
    const invitationRoutes = require("./routes/invitationRoutes");

    app.use("/api/auth", authRoutes);
    app.use("/api/clients", clientsRoutes);
    app.use("/api/courses", coursesRoutes);
    app.use("/api/planning", planningRoutes);
    app.use("/api/chat", chatRoutes);
    app.use("/api/employees", employeeRoutes);
    app.use("/api/invitation", invitationRoutes);

    // ‚úÖ Route de test
    app.get("/", (req, res) => res.send("üöÄ Serveur op√©rationnel et pr√™t √† l'emploi !"));

    // ‚úÖ Erreur 404
    app.use("*", (req, res) => {
      res.status(404).json({ error: "‚ùå Route non trouv√©e" });
    });

    // ‚úÖ Gestion d'erreur globale
    app.use((err, req, res, next) => {
      console.error("‚ùå Erreur serveur :", err.message);
      res.status(500).json({ error: err.message || "Erreur serveur interne" });
    });

    // ‚úÖ D√©marrage
    const PORT = process.env.PORT || 5000;
    server.listen(PORT, () =>
      console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT} et pr√™t √† l'emploi avec Socket.IO activ√© !`)
    );
  })
  .catch((err) => {
    console.error("‚ùå √âchec de connexion MongoDB :", err);
    process.exit(1);
  });
