const express = require("express");
const router = express.Router();
const Reservation = require("../models/DemandeReservation");
const Planning = require("../models/Planning");
const Entreprise = require("../models/Entreprise");
const crypto = require("crypto");
const mongoose = require("mongoose");

// ‚úÖ Cr√©er une nouvelle demande de r√©servation (client)
router.post("/", async (req, res) => {
  try {
    const {
      nom,
      prenom,
      email,
      telephone,
      depart,
      arrive,
      date,
      heure,
      description,
      entrepriseId,
    } = req.body;

    if (!nom || !prenom || !email || !telephone || !depart || !arrive || !date || !heure) {
      return res.status(400).json({
        error: "‚ö†Ô∏è Tous les champs obligatoires doivent √™tre remplis.",
      });
    }

    const nouvelleReservation = new Reservation({
      nom,
      prenom,
      email,
      telephone,
      depart,
      arrive,
      date,
      heure,
      description,
      entrepriseId: entrepriseId || null,
    });

    await nouvelleReservation.save();
    res.status(201).json({ message: "‚úÖ R√©servation envoy√©e avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur cr√©ation r√©servation :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// ‚úÖ R√©cup√©rer toutes les demandes d'une entreprise
router.get("/entreprise/:entrepriseId", async (req, res) => {
  try {
    const { entrepriseId } = req.params;
    
    // ‚úÖ AJOUT: V√©rification pour une valeur invalide
    if (!entrepriseId || entrepriseId === 'undefined') {
      return res.status(400).json({ error: "ID d'entreprise invalide" });
    }
    
    // ‚úÖ MODIFI√â: Pas de cast implicite vers ObjectId
    const reservations = await Reservation.find({ entrepriseId }).sort({ createdAt: -1 });
    res.status(200).json(reservations);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration r√©servations :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// ‚úÖ Accepter une r√©servation
router.put("/accepter/:id", async (req, res) => {
  try {
    const reservation = await Reservation.findByIdAndUpdate(
      req.params.id,
      { statut: "Accept√©e" },
      { new: true }
    );

    if (!reservation) {
      return res.status(404).json({ error: "R√©servation non trouv√©e." });
    }

    // ‚úÖ MODIFI√â: V√©rification de l'entrepriseId avant cr√©ation du Planning
    if (!reservation.entrepriseId) {
      return res.status(400).json({ error: "Cette r√©servation n'a pas d'ID d'entreprise associ√©." });
    }

    // ‚úÖ MODIFI√â: Cr√©ation du Planning avec l'entrepriseId de la r√©servation
    const newCourse = new Planning({
      nom: reservation.nom,
      prenom: reservation.prenom,
      depart: reservation.depart,
      arrive: reservation.arrive,
      date: reservation.date,
      heure: reservation.heure,
      description: reservation.description,
      statut: "En attente",
      chauffeur: "Patron",
      color: "#1a73e8",
      entrepriseId: reservation.entrepriseId, // ‚úÖ Ajout crucial de l'entrepriseId
      telephone: reservation.telephone || ""  // ‚úÖ Ajout du t√©l√©phone s'il est disponible
    });

    await newCourse.save();

    res.status(200).json({
      message: "‚úÖ R√©servation accept√©e et ajout√©e au planning.",
      reservation,
      course: newCourse // ‚úÖ AJOUT: Retourner la course cr√©√©e pour information
    });
  } catch (err) {
    console.error("‚ùå Erreur acceptation r√©servation :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// ‚úÖ Refuser une r√©servation
router.put("/refuser/:id", async (req, res) => {
  try {
    const reservation = await Reservation.findByIdAndUpdate(
      req.params.id,
      { statut: "Refus√©e" },
      { new: true }
    );

    if (!reservation) {
      return res.status(404).json({ error: "R√©servation non trouv√©e." });
    }

    res.status(200).json({ message: "‚ùå R√©servation refus√©e.", reservation });
  } catch (err) {
    console.error("‚ùå Erreur refus r√©servation :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// ‚úÖ Supprimer une r√©servation
router.delete("/:id", async (req, res) => {
  try {
    const deleted = await Reservation.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ error: "R√©servation non trouv√©e." });
    }

    res.status(200).json({ message: "üóëÔ∏è R√©servation supprim√©e." });
  } catch (err) {
    console.error("‚ùå Erreur suppression r√©servation :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// üìå G√©n√©rer lien unique pour les clients
router.post("/generer-lien/:entrepriseId", async (req, res) => {
  try {
    const { entrepriseId } = req.params;
    
    // ‚úÖ AJOUT: V√©rification pour une valeur invalide
    if (!entrepriseId || entrepriseId === 'undefined') {
      return res.status(400).json({ error: "ID d'entreprise invalide" });
    }
    
    const lienUnique = crypto.randomBytes(8).toString("hex");

    // ‚úÖ MODIFI√â: Pas besoin de cast vers ObjectId pour un ID temp-*
    const entreprise = await Entreprise.findByIdAndUpdate(
      entrepriseId,
      { lienReservation: lienUnique },
      { new: true }
    );
    
    if (!entreprise) {
      return res.status(404).json({ error: "Entreprise non trouv√©e." });
    }

    res.status(200).json({
      message: "üîó Lien g√©n√©r√© avec succ√®s !",
      lien: lienUnique,
    });
  } catch (err) {
    console.error("‚ùå Erreur g√©n√©ration lien :", err);
    res.status(500).json({ error: err.message || "Erreur serveur lors de la g√©n√©ration du lien." });
  }
});

// üìå R√©cup√©rer l'entreprise par lien unique
router.get("/client/:lienReservation", async (req, res) => {
  try {
    const { lienReservation } = req.params;
    
    if (!lienReservation) {
      return res.status(400).json({ error: "Lien de r√©servation requis." });
    }
    
    const entreprise = await Entreprise.findOne({
      lienReservation: lienReservation,
    });

    if (!entreprise) {
      return res.status(404).json({ error: "Lien invalide." });
    }

    res.status(200).json({
      entrepriseId: entreprise._id,
      entrepriseNom: entreprise.nom,
    });
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration entreprise par lien :", err);
    res.status(500).json({ error: err.message || "Erreur serveur" });
  }
});

// üìå Soumission du formulaire client
router.post("/client/:lienReservation", async (req, res) => {
  const {
    nom,
    prenom,
    email,
    telephone,
    depart,
    arrive,
    date,
    heure,
    description,
  } = req.body;

  try {
    const { lienReservation } = req.params;
    
    if (!lienReservation) {
      return res.status(400).json({ error: "Lien de r√©servation requis." });
    }
    
    // Validation des champs requis
    if (!nom || !prenom || !email || !telephone || !depart || !arrive || !date || !heure) {
      return res.status(400).json({
        error: "‚ö†Ô∏è Tous les champs marqu√©s d'un ast√©risque sont obligatoires."
      });
    }

    const entreprise = await Entreprise.findOne({
      lienReservation: lienReservation,
    });

    if (!entreprise) {
      return res.status(404).json({ error: "Lien invalide." });
    }

    const reservation = new Reservation({
      entrepriseId: entreprise._id, // ‚úÖ Utilisation de l'ID de l'entreprise trouv√©e
      nom,
      prenom,
      email,
      telephone,
      depart,
      arrive,
      date,
      heure,
      description,
      statut: "En attente",
    });
    await reservation.save();
    res.status(201).json({ message: "‚úÖ Demande envoy√©e avec succ√®s !" });
  } catch (err) {
    console.error("‚ùå Erreur soumission client :", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

module.exports = router;
